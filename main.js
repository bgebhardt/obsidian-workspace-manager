/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WorkspaceReorgPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// workspace-modal.ts
var import_obsidian = require("obsidian");
var WorkspaceManagerModal = class extends import_obsidian.Modal {
  constructor(app, workspaceManager) {
    super(app);
    this.workspaceManager = workspaceManager;
    this.workspaces = {};
    this.selectedWorkspace = "";
    this.selectedFiles = /* @__PURE__ */ new Set();
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Workspace Manager" });
    this.workspaces = await this.workspaceManager.getWorkspaces();
    this.createWorkspaceList(contentEl);
    this.createFileList(contentEl);
    this.createControls(contentEl);
  }
  createWorkspaceList(container) {
    const workspaceContainer = container.createDiv("workspace-list");
    workspaceContainer.createEl("h3", { text: "Workspaces" });
    Object.keys(this.workspaces).forEach((workspaceName) => {
      const workspaceEl = workspaceContainer.createDiv("workspace-item");
      workspaceEl.setText(workspaceName);
      workspaceEl.addClass("clickable-item");
      workspaceEl.addEventListener("click", () => {
        workspaceContainer.querySelectorAll(".selected").forEach(
          (el) => el.removeClass("selected")
        );
        workspaceEl.addClass("selected");
        this.selectedWorkspace = workspaceName;
        this.updateFileList();
      });
    });
  }
  createFileList(container) {
    const fileContainer = container.createDiv("file-list");
    fileContainer.createEl("h3", { text: "Files in Workspace" });
    const fileListEl = fileContainer.createDiv("file-items");
    fileListEl.id = "file-list-content";
  }
  updateFileList() {
    const fileListEl = document.getElementById("file-list-content");
    if (!fileListEl || !this.selectedWorkspace)
      return;
    fileListEl.empty();
    const workspace = this.workspaces[this.selectedWorkspace];
    const tabs = this.workspaceManager.extractTabsFromWorkspace(workspace);
    tabs.forEach((tab) => {
      const fileEl = fileListEl.createDiv("file-item");
      const checkbox = fileEl.createEl("input", { type: "checkbox" });
      checkbox.addEventListener("change", (e) => {
        if (e.target.checked) {
          this.selectedFiles.add(tab.path);
        } else {
          this.selectedFiles.delete(tab.path);
        }
      });
      fileEl.createSpan({ text: tab.title });
      fileEl.createSpan({ text: ` (${tab.path})`, cls: "file-path" });
    });
  }
  createControls(container) {
    const controlsContainer = container.createDiv("controls");
    new import_obsidian.Setting(controlsContainer).setName("Move to workspace").addDropdown((dropdown) => {
      Object.keys(this.workspaces).forEach((name) => {
        dropdown.addOption(name, name);
      });
    });
    const buttonContainer = controlsContainer.createDiv("button-container");
    new import_obsidian.ButtonComponent(buttonContainer).setButtonText("Move Selected Files").onClick(async () => {
      await this.moveSelectedFiles();
    });
    new import_obsidian.ButtonComponent(buttonContainer).setButtonText("Close").onClick(() => {
      this.close();
    });
  }
  async moveSelectedFiles() {
    await this.workspaceManager.saveWorkspaces(this.workspaces);
    this.updateFileList();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// workspace-manager.ts
var import_obsidian2 = require("obsidian");
var WorkspaceManager = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  async getWorkspaces() {
    try {
      const workspaceFile = await this.app.vault.adapter.read(".obsidian/workspaces.json");
      return JSON.parse(workspaceFile);
    } catch (error) {
      new import_obsidian2.Notice("Could not read workspaces file");
      return {};
    }
  }
  async saveWorkspaces(workspaces) {
    try {
      await this.createBackup();
      const jsonString = JSON.stringify(workspaces, null, 2);
      await this.app.vault.adapter.write(".obsidian/workspaces.json", jsonString);
      new import_obsidian2.Notice("Workspaces updated successfully");
    } catch (error) {
      new import_obsidian2.Notice("Failed to save workspaces");
      console.error(error);
    }
  }
  async createBackup() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
    const backupName = `.obsidian/workspaces-backup-${timestamp}.json`;
    try {
      const currentWorkspaces = await this.app.vault.adapter.read(".obsidian/workspaces.json");
      await this.app.vault.adapter.write(backupName, currentWorkspaces);
    } catch (error) {
      console.warn("Could not create backup:", error);
    }
  }
  extractTabsFromWorkspace(workspace) {
    const tabs = [];
    const extractFromNode = (node) => {
      var _a;
      if (node.type === "leaf" && ((_a = node.state) == null ? void 0 : _a.file)) {
        tabs.push({
          id: node.id || "",
          path: node.state.file,
          title: node.state.file.split("/").pop() || "",
          type: node.state.type || "markdown"
        });
      } else if (node.children) {
        node.children.forEach(extractFromNode);
      }
    };
    if (workspace.main) {
      extractFromNode(workspace.main);
    }
    return tabs;
  }
  moveFilesBetweenWorkspaces(workspaces, filePaths, fromWorkspace, toWorkspace) {
    return workspaces;
  }
};

// main.ts
var WorkspaceReorgPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    console.log("Loading Workspace Reorganizer");
    this.workspaceManager = new WorkspaceManager(this.app, this);
    this.addRibbonIcon("layout-grid", "Reorganize Workspaces", () => {
      new WorkspaceManagerModal(this.app, this.workspaceManager).open();
    });
    this.addCommand({
      id: "open-workspace-manager",
      name: "Open Workspace Manager",
      callback: () => {
        new WorkspaceManagerModal(this.app, this.workspaceManager).open();
      }
    });
  }
  onunload() {
    console.log("Unloading Workspace Reorganizer");
  }
};
//# sourceMappingURL=data:application/json;base64,
