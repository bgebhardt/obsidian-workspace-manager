/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WorkspaceManagerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/WorkspaceManager.ts
var import_obsidian = require("obsidian");

// src/Logger.ts
var Logger = class {
  static setDebug(isDebug) {
    this.isDebug = isDebug;
  }
  static log(message, ...optionalParams) {
    console.log(message, ...optionalParams);
  }
  static info(message, ...optionalParams) {
    console.info(message, ...optionalParams);
  }
  static warn(message, ...optionalParams) {
    console.warn(message, ...optionalParams);
  }
  static error(message, ...optionalParams) {
    console.error(message, ...optionalParams);
  }
  static debug(message, ...optionalParams) {
    if (this.isDebug) {
      console.debug(message, ...optionalParams);
    }
  }
};
Logger.isDebug = true;

// src/WorkspaceManager.ts
var WorkspaceManager = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
  }
  get workspacePlugin() {
    return this.app.internalPlugins.plugins.workspaces;
  }
  /**
   * Checks if the Workspaces plugin is enabled.
   * @returns {boolean} - True if the plugin is enabled, false otherwise.
   */
  isPluginEnabled() {
    var _a;
    const enabled = (_a = this.workspacePlugin) == null ? void 0 : _a.enabled;
    if (!enabled) {
      new import_obsidian.Notice("Workspaces plugin is not enabled");
      Logger.warn("Workspaces plugin is not enabled");
    }
    return enabled;
  }
  /**
   * Gets the list of all available workspaces.
   * @returns {string[]} - A list of workspace names.
   */
  getWorkspaceList() {
    var _a;
    if (!this.isPluginEnabled())
      return [];
    const workspaces = ((_a = this.workspacePlugin.instance) == null ? void 0 : _a.workspaces) || {};
    Logger.debug("Available workspaces:", Object.keys(workspaces));
    return Object.keys(workspaces);
  }
  /**
   * Gets the list of open file paths in a given workspace.
   * @param {string} workspaceName - The name of the workspace to inspect.
   * @returns {Promise<string[]>} - A list of file paths.
   */
  getFilesInWorkspace(workspaceName) {
    var _a;
    if (!this.isPluginEnabled())
      return [];
    const workspace = (_a = this.workspacePlugin.instance) == null ? void 0 : _a.workspaces[workspaceName];
    if (!workspace) {
      Logger.warn(`Workspace "${workspaceName}" not found.`);
      return [];
    }
    const files = [];
    const extractFromNode = (node) => {
      var _a2, _b;
      if ((node == null ? void 0 : node.type) === "leaf" && ((_b = (_a2 = node.state) == null ? void 0 : _a2.state) == null ? void 0 : _b.file)) {
        if (typeof node.state.state.file === "string") {
          files.push(node.state.state.file);
        }
      } else if ((node == null ? void 0 : node.children) && Array.isArray(node.children)) {
        node.children.forEach(extractFromNode);
      }
    };
    if (workspace.main) {
      extractFromNode(workspace.main);
    }
    Logger.debug(`Files in workspace "${workspaceName}":`, files);
    return files;
  }
  /**
   * Reorganizes a workspace by adding and removing files.
   * @param {string} workspaceName - The name of the workspace to reorganize.
   * @param {string[]} filesToAdd - A list of file paths to add to the workspace.
   * @param {string[]} filesToRemove - A list of file paths to remove from the workspace.
   */
  async reorganizeWorkspace(workspaceName, filesToAdd, filesToRemove) {
    if (!this.isPluginEnabled()) {
      Logger.warn("reorganizeWorkspace: Workspaces plugin is not enabled. Aborting.");
      return;
    }
    Logger.debug(`Starting reorganization for workspace: "${workspaceName}"`, { filesToAdd, filesToRemove });
    Logger.debug(`Loading workspace "${workspaceName}"...`);
    await this.workspacePlugin.instance.loadWorkspace(workspaceName);
    Logger.debug(`Workspace "${workspaceName}" loaded.`);
    if (filesToRemove.length > 0) {
      Logger.debug("Removing files:", filesToRemove);
      this.app.workspace.iterateAllLeaves((leaf) => {
        var _a;
        const filePath = (_a = leaf.view.file) == null ? void 0 : _a.path;
        if (filePath && filesToRemove.includes(filePath)) {
          Logger.debug(`Detaching leaf with file: "${filePath}"`);
          leaf.detach();
        }
      });
      Logger.debug("Finished removing files.");
    }
    if (filesToAdd.length > 0) {
      Logger.debug("Adding files:", filesToAdd);
      for (const filePath of filesToAdd) {
        const file = this.app.vault.getAbstractFileByPath(filePath);
        if (file instanceof import_obsidian.TFile) {
          Logger.debug(`Found file in vault: "${filePath}". Opening in new leaf.`);
          const leaf = this.app.workspace.getLeaf(true);
          await leaf.openFile(file);
          Logger.debug(`File "${filePath}" opened.`);
        } else {
          Logger.warn(`File not found in vault: "${filePath}". Skipping.`);
        }
      }
      Logger.debug("Finished adding files.");
    }
    Logger.debug(`Saving workspace "${workspaceName}"...`);
    await this.workspacePlugin.instance.saveWorkspace(workspaceName);
    Logger.debug(`Workspace "${workspaceName}" saved.`);
    new import_obsidian.Notice(`Workspace "${workspaceName}" has been updated.`);
    Logger.info(`Workspace "${workspaceName}" reorganized and saved.`);
  }
  /**
   * Deletes a workspace.
   * @param {string} workspaceName - The name of the workspace to delete.
   */
  async deleteWorkspace(workspaceName) {
    if (!this.isPluginEnabled())
      return;
    const workspaceInstance = this.workspacePlugin.instance;
    if (workspaceInstance && workspaceInstance.workspaces[workspaceName]) {
      delete workspaceInstance.workspaces[workspaceName];
      await workspaceInstance.saveWorkspaces();
      new import_obsidian.Notice(`Workspace "${workspaceName}" deleted.`);
      Logger.info(`Workspace "${workspaceName}" deleted.`);
    } else {
      new import_obsidian.Notice(`Workspace "${workspaceName}" not found.`);
      Logger.warn(`Workspace "${workspaceName}" not found for deletion.`);
    }
  }
  /**
   * Renames a workspace.
   * @param {string} oldName - The current name of the workspace.
   * @param {string} newName - The new name for the workspace.
   */
  async renameWorkspace(oldName, newName) {
    if (!this.isPluginEnabled())
      return;
    Logger.debug(`Renaming workspace from "${oldName}" to "${newName}".`);
    await this.workspacePlugin.instance.loadWorkspace(oldName);
    await this.workspacePlugin.instance.saveWorkspace(newName);
    await this.deleteWorkspace(oldName);
    new import_obsidian.Notice(`Workspace renamed from "${oldName}" to "${newName}".`);
    Logger.info(`Workspace renamed from "${oldName}" to "${newName}".`);
  }
};

// src/WorkspaceManagerModal.ts
var import_obsidian2 = require("obsidian");
var WorkspaceManagerModal = class extends import_obsidian2.Modal {
  constructor(app, workspaceManager) {
    super(app);
    this.workspaceManager = workspaceManager;
    this.sourceWorkspace = "";
    this.targetWorkspace = "";
    this.selectedFiles = [];
    this.filesInSource = [];
  }
  async onOpen() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("workspace-manager-modal");
    contentEl.createEl("h2", { text: "Workspace Manager" });
    if (!this.workspaceManager.isPluginEnabled()) {
      contentEl.createEl("p", { text: "The Workspaces plugin is not enabled. Please enable it in the Obsidian settings." });
      return;
    }
    const workspaceNames = this.workspaceManager.getWorkspaceList();
    Logger.info("Workspaces found:", workspaceNames);
    if (workspaceNames.length < 1) {
      contentEl.createEl("p", { text: "No workspaces found to manage." });
      return;
    }
    this.sourceWorkspace = ((_a = this.app.workspace.activeLeaf) == null ? void 0 : _a.getDisplayText()) || workspaceNames[0];
    this.targetWorkspace = workspaceNames.find((name) => name !== this.sourceWorkspace) || this.sourceWorkspace;
    new import_obsidian2.Setting(contentEl).setName("Source Workspace").setDesc("Select the workspace to move files from").addDropdown((dropdown) => {
      workspaceNames.forEach((name) => dropdown.addOption(name, name));
      dropdown.setValue(this.sourceWorkspace);
      dropdown.onChange(async (value) => {
        this.sourceWorkspace = value;
        Logger.debug(`Source workspace changed to: ${value}`);
        await this.updateTabsList();
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Target Workspace").setDesc("Select the workspace to move files to").addDropdown((dropdown) => {
      workspaceNames.forEach((name) => dropdown.addOption(name, name));
      dropdown.setValue(this.targetWorkspace);
      dropdown.onChange((value) => {
        this.targetWorkspace = value;
        Logger.debug(`Target workspace changed to: ${value}`);
      });
    });
    contentEl.createDiv({ cls: "workspace-manager-tabs" });
    const buttonContainer = contentEl.createDiv({ cls: "workspace-manager-buttons" });
    buttonContainer.createEl("button", { text: "Move Selected", cls: "mod-cta" }).addEventListener("click", async () => {
      Logger.debug("Move button clicked");
      if (this.sourceWorkspace === this.targetWorkspace) {
        new import_obsidian2.Notice("Source and target workspaces must be different.");
        Logger.warn("Move failed: Source and target workspaces are the same.");
        return;
      }
      if (this.selectedFiles.length === 0) {
        new import_obsidian2.Notice("No files selected to move.");
        Logger.warn("Move failed: No files selected.");
        return;
      }
      Logger.debug(`Moving ${this.selectedFiles.length} files from ${this.sourceWorkspace} to ${this.targetWorkspace}`);
      await this.workspaceManager.reorganizeWorkspace(this.sourceWorkspace, [], this.selectedFiles);
      await this.workspaceManager.reorganizeWorkspace(this.targetWorkspace, this.selectedFiles, []);
      new import_obsidian2.Notice(`Moved ${this.selectedFiles.length} files to ${this.targetWorkspace}.`);
      await this.updateTabsList();
    });
    buttonContainer.createEl("button", { text: "Copy Selected" }).addEventListener("click", async () => {
      Logger.debug("Copy button clicked");
      if (this.sourceWorkspace === this.targetWorkspace) {
        new import_obsidian2.Notice("Source and target workspaces must be different.");
        Logger.warn("Copy failed: Source and target workspaces are the same.");
        return;
      }
      if (this.selectedFiles.length === 0) {
        new import_obsidian2.Notice("No files selected to copy.");
        Logger.warn("Copy failed: No files selected.");
        return;
      }
      Logger.debug(`Copying ${this.selectedFiles.length} files from ${this.sourceWorkspace} to ${this.targetWorkspace}`);
      await this.workspaceManager.reorganizeWorkspace(this.targetWorkspace, this.selectedFiles, []);
      new import_obsidian2.Notice(`Copied ${this.selectedFiles.length} files to ${this.targetWorkspace}.`);
      await this.updateTabsList();
    });
    buttonContainer.createEl("button", { text: "Delete Selected" }).addEventListener("click", async () => {
      Logger.debug("Delete button clicked");
      if (this.selectedFiles.length === 0) {
        new import_obsidian2.Notice("No files selected to delete.");
        Logger.warn("Delete failed: No files selected.");
        return;
      }
      Logger.debug(`Deleting ${this.selectedFiles.length} files from ${this.sourceWorkspace}`);
      await this.workspaceManager.reorganizeWorkspace(this.sourceWorkspace, [], this.selectedFiles);
      new import_obsidian2.Notice(`Deleted ${this.selectedFiles.length} files from ${this.sourceWorkspace}.`);
      await this.updateTabsList();
    });
    await this.updateTabsList();
  }
  async updateTabsList() {
    Logger.debug(`Updating tabs list for workspace: ${this.sourceWorkspace}`);
    const tabsContainer = this.contentEl.querySelector(".workspace-manager-tabs");
    if (!tabsContainer) {
      Logger.warn("Tabs container not found in modal.");
      return;
    }
    tabsContainer.empty();
    this.selectedFiles = [];
    this.filesInSource = await this.workspaceManager.getFilesInWorkspace(this.sourceWorkspace);
    Logger.debug("Files in source workspace:", this.filesInSource);
    if (this.filesInSource.length === 0) {
      tabsContainer.createEl("p", { text: "No open files in this workspace." });
      return;
    }
    this.filesInSource.forEach((filePath) => {
      new import_obsidian2.Setting(tabsContainer).setName(filePath.split("/").pop() || filePath).setDesc(filePath).addToggle((toggle) => {
        toggle.onChange((value) => {
          if (value) {
            this.selectedFiles.push(filePath);
          } else {
            this.selectedFiles = this.selectedFiles.filter((path) => path !== filePath);
          }
          Logger.debug("Selected files:", this.selectedFiles);
        });
      });
    });
  }
  onClose() {
    Logger.debug("Closing Workspace Manager modal");
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/types.ts
var DEFAULT_SETTINGS = {
  backupLocation: ".obsidian/backups",
  maxBackups: 10,
  debug: true
};

// src/main.ts
var WorkspaceManagerPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    Logger.setDebug(this.settings.debug);
    Logger.info("Loading Workspace Manager plugin");
    this.workspaceManager = new WorkspaceManager(this.app, this.settings);
    this.addRibbonIcon("folder", "Workspace Manager", () => {
      if (this.workspaceManager.isPluginEnabled()) {
        new WorkspaceManagerModal(this.app, this.workspaceManager).open();
      }
    });
    Logger.info("Added ribbon icon for Workspace Manager");
    this.addCommand({
      id: "open-workspace-manager",
      name: "Open Workspace Manager",
      callback: () => {
        Logger.info("Opening Workspace Manager Modal");
        if (this.workspaceManager.isPluginEnabled()) {
          new WorkspaceManagerModal(this.app, this.workspaceManager).open();
        }
      }
    });
    Logger.info("Added command: open-workspace-manager");
    this.addSettingTab(new WorkspaceManagerSettingTab(this.app, this));
  }
  onunload() {
    Logger.info("Unloading Workspace Manager plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    Logger.setDebug(this.settings.debug);
  }
};
var WorkspaceManagerSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Workspace Manager Settings" });
    new import_obsidian3.Setting(containerEl).setName("Enable Debug Logging").setDesc("Turns on verbose logging to the console.").addToggle((toggle) => toggle.setValue(this.plugin.settings.debug).onChange(async (value) => {
      this.plugin.settings.debug = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
