/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WorkspaceManagerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/WorkspaceManager.ts
var import_obsidian = require("obsidian");

// src/Logger.ts
var Logger = class {
  static setDebug(isDebug) {
    this.isDebug = isDebug;
  }
  static log(message, ...optionalParams) {
    console.log(message, ...optionalParams);
  }
  static info(message, ...optionalParams) {
    console.info(message, ...optionalParams);
  }
  static warn(message, ...optionalParams) {
    console.warn(message, ...optionalParams);
  }
  static error(message, ...optionalParams) {
    console.error(message, ...optionalParams);
  }
  static debug(message, ...optionalParams) {
    if (this.isDebug) {
      console.debug(message, ...optionalParams);
    }
  }
};
Logger.isDebug = false;

// src/WorkspaceManager.ts
var WorkspaceManager = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
    this.transactionBackupPath = null;
  }
  // Read workspaces.json
  async getWorkspaces() {
    try {
      const workspaceFile = await this.app.vault.adapter.read(".obsidian/workspaces.json");
      return JSON.parse(workspaceFile);
    } catch (error) {
      new import_obsidian.Notice("Could not read workspaces file");
      Logger.error("Could not read workspaces file", error);
      return { workspaces: {}, active: "" };
    }
  }
  // Save workspaces.json with backup
  async saveWorkspaces(workspacesData) {
    try {
      await this.createBackup();
      const jsonString = JSON.stringify(workspacesData, null, 2);
      await this.writeAtomically(".obsidian/workspaces.json", jsonString);
      new import_obsidian.Notice("Workspaces updated successfully");
    } catch (error) {
      new import_obsidian.Notice("Failed to save workspaces");
      Logger.error("Failed to save workspaces", error);
      throw error;
    }
  }
  // Create a backup of workspaces.json
  async createBackup() {
    const timestamp = (/* @__PURE__ */ new Date()).toISOString().replace(/[:.]/g, "-");
    const backupFolder = this.settings.backupLocation || ".obsidian/backups";
    const backupName = `${backupFolder}/workspaces-backup-${timestamp}.json`;
    try {
      await this.ensureFolder(backupFolder);
      const currentWorkspaces = await this.app.vault.adapter.read(".obsidian/workspaces.json");
      await this.app.vault.adapter.write(backupName, currentWorkspaces);
      await this.pruneOldBackups();
      return backupName;
    } catch (error) {
      Logger.warn("Could not create backup:", error);
      throw error;
    }
  }
  // Extract tabs from a workspace
  extractTabsFromWorkspace(workspace) {
    const tabs = [];
    const extractFromNode = (node) => {
      var _a, _b;
      if (node.type === "leaf" && ((_b = (_a = node.state) == null ? void 0 : _a.state) == null ? void 0 : _b.file)) {
        tabs.push({
          id: node.id,
          workspaceName: "",
          filePath: node.state.state.file,
          title: node.state.title || node.state.state.file.split("/").pop() || "",
          type: node.state.type || "markdown",
          icon: node.state.icon
        });
      } else if (node.children) {
        node.children.forEach(extractFromNode);
      }
    };
    if (workspace.main) {
      extractFromNode(workspace.main);
    }
    return tabs;
  }
  // Move tabs between workspaces
  async moveTabsBetweenWorkspaces(sourceWorkspaceName, targetWorkspaceName, tabIds) {
    try {
      await this.beginTransaction();
      const workspacesData = await this.getWorkspaces();
      if (!workspacesData.workspaces[sourceWorkspaceName] || !workspacesData.workspaces[targetWorkspaceName]) {
        throw new Error("Source or target workspace not found");
      }
      const sourceWorkspace = workspacesData.workspaces[sourceWorkspaceName];
      const targetWorkspace = workspacesData.workspaces[targetWorkspaceName];
      const tabsToMove = [];
      for (const tabId of tabIds) {
        const tabInfo = this.findTabInWorkspace(sourceWorkspace, tabId);
        if (tabInfo) {
          tabsToMove.push(tabInfo.tab);
        } else {
          Logger.warn(`Tab ${tabId} not found in workspace ${sourceWorkspaceName}`);
        }
      }
      for (const tabId of tabsToMove.map((t) => t.id)) {
        this.removeTabFromWorkspace(sourceWorkspace, tabId);
      }
      for (const tab of tabsToMove) {
        this.addTabToWorkspace(targetWorkspace, tab);
      }
      sourceWorkspace.mtime = (/* @__PURE__ */ new Date()).toISOString();
      targetWorkspace.mtime = (/* @__PURE__ */ new Date()).toISOString();
      await this.saveWorkspaces(workspacesData);
      await this.commitTransaction();
      return true;
    } catch (error) {
      await this.rollbackTransaction();
      Logger.error("Failed to move files:", error);
      new import_obsidian.Notice(`Failed to move files: ${error.message}`);
      return false;
    }
  }
  async deleteTabsFromWorkspace(workspaceName, tabIds) {
    try {
      await this.beginTransaction();
      const workspacesData = await this.getWorkspaces();
      if (!workspacesData.workspaces[workspaceName]) {
        throw new Error("Workspace not found");
      }
      const workspace = workspacesData.workspaces[workspaceName];
      let tabsDeleted = 0;
      for (const tabId of tabIds) {
        if (this.removeTabFromWorkspace(workspace, tabId)) {
          tabsDeleted++;
        } else {
          Logger.warn(`Tab ${tabId} not found in workspace ${workspaceName}`);
        }
      }
      if (tabsDeleted > 0) {
        workspace.mtime = (/* @__PURE__ */ new Date()).toISOString();
        await this.saveWorkspaces(workspacesData);
      }
      await this.commitTransaction();
      return true;
    } catch (error) {
      await this.rollbackTransaction();
      Logger.error("Failed to delete tabs:", error);
      new import_obsidian.Notice(`Failed to delete tabs: ${error.message}`);
      return false;
    }
  }
  // Transaction methods
  async beginTransaction() {
    this.transactionBackupPath = await this.createBackup();
  }
  async commitTransaction() {
    this.transactionBackupPath = null;
  }
  async rollbackTransaction() {
    if (!this.transactionBackupPath) {
      Logger.warn("No transaction backup to restore");
      return;
    }
    try {
      const backupContent = await this.app.vault.adapter.read(this.transactionBackupPath);
      await this.app.vault.adapter.write(".obsidian/workspaces.json", backupContent);
      this.transactionBackupPath = null;
    } catch (error) {
      Logger.error("Failed to rollback transaction:", error);
      throw new Error(`Failed to rollback: ${error.message}`);
    }
  }
  // Utility methods
  findTabInWorkspace(workspace, tabId) {
    const find = (node) => {
      if (node.children) {
        for (const child of node.children) {
          if (child.id === tabId && child.type === "leaf") {
            return { tab: child, parent: node };
          }
          const found = find(child);
          if (found) {
            return found;
          }
        }
      }
      return null;
    };
    return find(workspace.main);
  }
  removeTabFromWorkspace(workspace, tabId) {
    const tabInfo = this.findTabInWorkspace(workspace, tabId);
    if (tabInfo && tabInfo.parent && tabInfo.parent.children) {
      tabInfo.parent.children = tabInfo.parent.children.filter((child) => child.id !== tabId);
      if (tabInfo.parent.children.length === 0 && tabInfo.parent.type === "split") {
      }
      return true;
    }
    return false;
  }
  addTabToWorkspace(workspace, tab) {
    const findFirstTabGroup = (node) => {
      if (node.type === "tabs") {
        return node;
      }
      if (node.children) {
        for (const child of node.children) {
          const found = findFirstTabGroup(child);
          if (found)
            return found;
        }
      }
      return null;
    };
    let targetTabs = findFirstTabGroup(workspace.main);
    if (!targetTabs) {
      if (workspace.main.type !== "split" || !workspace.main.children) {
        const originalMain = { ...workspace.main };
        workspace.main.type = "split";
        workspace.main.direction = "vertical";
        workspace.main.children = [originalMain];
      }
      targetTabs = {
        id: `tabs-${Date.now()}`,
        type: "tabs",
        children: []
      };
      workspace.main.children.push(targetTabs);
    }
    if (!targetTabs.children) {
      targetTabs.children = [];
    }
    targetTabs.children.push(tab);
  }
  async writeAtomically(path, data) {
    const tempPath = `${path}.tmp`;
    try {
      await this.app.vault.adapter.write(tempPath, data);
      const writtenData = await this.app.vault.adapter.read(tempPath);
      this.validateData(writtenData, data);
      if (await this.app.vault.adapter.exists(path)) {
        const backupPath = `${path}.bak`;
        const originalData = await this.app.vault.adapter.read(path);
        await this.app.vault.adapter.write(backupPath, originalData);
      }
      if (await this.app.vault.adapter.exists(path)) {
        await this.app.vault.adapter.remove(path);
      }
      await this.app.vault.adapter.rename(tempPath, path);
    } catch (error) {
      if (await this.app.vault.adapter.exists(tempPath)) {
        await this.app.vault.adapter.remove(tempPath);
      }
      throw error;
    }
  }
  validateData(written, expected) {
    try {
      JSON.parse(written);
    } catch (error) {
      throw new Error(`Data validation failed: ${error.message}`);
    }
  }
  async ensureFolder(path) {
    if (!await this.app.vault.adapter.exists(path)) {
      await this.app.vault.adapter.mkdir(path);
    }
  }
  async pruneOldBackups() {
    const backupFolder = this.settings.backupLocation || ".obsidian/backups";
    const maxBackups = this.settings.maxBackups || 10;
    try {
      const { files } = await this.app.vault.adapter.list(backupFolder);
      const backupFiles = files.filter((file) => file.endsWith(".json")).sort((a, b) => {
        var _a, _b;
        const timestampA = ((_a = a.match(/workspaces-backup-(.+)\.json$/)) == null ? void 0 : _a[1]) || "";
        const timestampB = ((_b = b.match(/workspaces-backup-(.+)\.json$/)) == null ? void 0 : _b[1]) || "";
        return timestampB.localeCompare(timestampA);
      });
      if (backupFiles.length > maxBackups) {
        const filesToRemove = backupFiles.slice(maxBackups);
        for (const file of filesToRemove) {
          await this.app.vault.adapter.remove(`${backupFolder}/${file}`);
        }
      }
    } catch (error) {
      Logger.warn("Failed to prune old backups:", error);
    }
  }
};

// src/WorkspaceManagerModal.ts
var import_obsidian2 = require("obsidian");
var WorkspaceManagerModal = class extends import_obsidian2.Modal {
  constructor(app, workspaceManager) {
    super(app);
    this.sourceWorkspace = "";
    this.targetWorkspace = "";
    this.selectedTabs = [];
    this.workspaceManager = workspaceManager;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("workspace-manager-modal");
    contentEl.createEl("h2", { text: "Workspace Manager" });
    const workspacesData = await this.workspaceManager.getWorkspaces();
    const workspaceNames = Object.keys(workspacesData.workspaces);
    Logger.info("Workspaces found:", workspaceNames);
    if (workspaceNames.length < 1) {
      contentEl.createEl("p", { text: "No workspaces found to manage." });
      return;
    }
    this.sourceWorkspace = workspacesData.active || workspaceNames[0];
    this.targetWorkspace = workspaceNames.find((name) => name !== this.sourceWorkspace) || this.sourceWorkspace;
    new import_obsidian2.Setting(contentEl).setName("Source Workspace").setDesc("Select the workspace to move files from").addDropdown((dropdown) => {
      workspaceNames.forEach((name) => dropdown.addOption(name, name));
      dropdown.setValue(this.sourceWorkspace);
      dropdown.onChange((value) => {
        this.sourceWorkspace = value;
        this.updateTabsList();
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Target Workspace").setDesc("Select the workspace to move files to").addDropdown((dropdown) => {
      workspaceNames.forEach((name) => dropdown.addOption(name, name));
      dropdown.setValue(this.targetWorkspace);
      dropdown.onChange((value) => {
        this.targetWorkspace = value;
      });
    });
    contentEl.createDiv({ cls: "workspace-manager-tabs" });
    const buttonContainer = contentEl.createDiv({ cls: "workspace-manager-buttons" });
    buttonContainer.createEl("button", { text: "Move Selected", cls: "mod-cta" }).addEventListener("click", async () => {
      if (this.sourceWorkspace === this.targetWorkspace) {
        new import_obsidian2.Notice("Source and target workspaces must be different.");
        return;
      }
      if (this.selectedTabs.length === 0) {
        new import_obsidian2.Notice("No tabs selected to move.");
        return;
      }
      const success = await this.workspaceManager.moveTabsBetweenWorkspaces(
        this.sourceWorkspace,
        this.targetWorkspace,
        this.selectedTabs
      );
      if (success) {
        new import_obsidian2.Notice(`Moved ${this.selectedTabs.length} tabs to ${this.targetWorkspace}.`);
        this.close();
      }
    });
    buttonContainer.createEl("button", { text: "Delete Selected" }).addEventListener("click", async () => {
      if (this.selectedTabs.length === 0) {
        new import_obsidian2.Notice("No tabs selected to delete.");
        return;
      }
      const success = await this.workspaceManager.deleteTabsFromWorkspace(
        this.sourceWorkspace,
        this.selectedTabs
      );
      if (success) {
        new import_obsidian2.Notice(`Deleted ${this.selectedTabs.length} tabs from ${this.sourceWorkspace}.`);
        this.updateTabsList();
      }
    });
    this.updateTabsList();
  }
  async updateTabsList() {
    const tabsContainer = this.contentEl.querySelector(".workspace-manager-tabs");
    if (!tabsContainer)
      return;
    tabsContainer.empty();
    this.selectedTabs = [];
    const workspacesData = await this.workspaceManager.getWorkspaces();
    const workspace = workspacesData.workspaces[this.sourceWorkspace];
    if (!workspace) {
      tabsContainer.createEl("p", { text: "Workspace not found." });
      return;
    }
    const tabs = this.workspaceManager.extractTabsFromWorkspace(workspace);
    if (tabs.length === 0) {
      tabsContainer.createEl("p", { text: "No open tabs in this workspace." });
      return;
    }
    tabs.forEach((tab) => {
      new import_obsidian2.Setting(tabsContainer).setName(tab.title).setDesc(tab.filePath).addToggle((toggle) => {
        toggle.onChange((value) => {
          if (value) {
            this.selectedTabs.push(tab.id);
          } else {
            this.selectedTabs = this.selectedTabs.filter((id) => id !== tab.id);
          }
        });
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/types.ts
var DEFAULT_SETTINGS = {
  backupLocation: ".obsidian/backups",
  maxBackups: 10,
  debug: true
};

// src/main.ts
var WorkspaceManagerPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    Logger.setDebug(this.settings.debug);
    Logger.info("Loading Workspace Manager plugin");
    this.workspaceManager = new WorkspaceManager(this.app, this.settings);
    this.addRibbonIcon("folder", "Workspace Manager", () => {
      new WorkspaceManagerModal(this.app, this.workspaceManager).open();
    });
    Logger.info("Added ribbon icon for Workspace Manager");
    this.addCommand({
      id: "open-workspace-manager",
      name: "Open Workspace Manager",
      callback: () => {
        Logger.info("Opening Workspace Manager Modal");
        new WorkspaceManagerModal(this.app, this.workspaceManager).open();
      }
    });
    Logger.info("Added command: open-workspace-manager");
    this.addSettingTab(new WorkspaceManagerSettingTab(this.app, this));
  }
  onunload() {
    Logger.info("Unloading Workspace Manager plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    Logger.setDebug(this.settings.debug);
  }
};
var WorkspaceManagerSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Workspace Manager Settings" });
    new import_obsidian3.Setting(containerEl).setName("Enable Debug Logging").setDesc("Turns on verbose logging to the console.").addToggle((toggle) => toggle.setValue(this.plugin.settings.debug).onChange(async (value) => {
      this.plugin.settings.debug = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
